
group "org.polypheny"
description = "A lightweight Polypheny-DB benchmarking client"

def versionMajor = 1
def versionMinor = 5
def versionQualifier = "-SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "5.2.0"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "5.0.1"
    }
}


repositories {
    mavenLocal()
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    maven {
        url "https://clojars.org/repo/"
    }
    mavenCentral()
    jcenter()
}

apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"
apply plugin: "com.github.johnrengelman.shadow"


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


dependencies {
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6' // License: Apache 2.0

    // Chronos
    implementation group: 'ch.unibas.dmi.dbis.chronos', name: 'chronos-agent', version: '2.3.2' // License: MIT

    // REST
    implementation group: 'com.konghq', name: 'unirest-java', version: '3.7.02' // License: MIT

    // JDBC Drivers
    implementation group: 'org.polypheny', name: 'polypheny-jdbc-driver', version: '1.3' // License: Apache 2.0
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.1'
    implementation group: 'monetdb', name: 'monetdb-jdbc', version: '2.29' // License: Mozilla Public License 2.0

    // JSON
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6' // License: Apache 2.0

    // CLI library
    implementation group: 'com.github.rvesse', name: 'airline', version: '2.7.2' // License: Apache 2.0

    // Fake data generator
    implementation group: 'com.devskiller', name: 'jfairy', version: '0.6.3' // License: Apache 2.0

    // CSV
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.0' // License: Apache 2.0

    // Web sockets
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.4.1' // License: MIT

    // LOGGING
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30' // License: MIT
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.1' // License: Apache 2.0
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1' // License: Apache 2.0

    // Testing
    testImplementation group: 'junit', name: 'junit', version: '4.13'
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE

    options.setOutputLevel(JavadocOutputLevel.QUIET)
    options.quiet()
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Version": project.version
        attributes "Main-Class": "org.polypheny.simpleclient.cli.Main"
        attributes "Multi-Release": "true"
        attributes "Implementation-Version": project.version
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    classifier = ''
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}


/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}
